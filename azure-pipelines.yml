trigger:
- '*' 

pool:
  name: 'Default' # Replace Default with the name of your agent pool if you used a different pool

variables:
  buildConfiguration: 'Release' #Specifies the build configuration.
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot' #Specifies the path to the wwwroot directory.
  dotnetSdkVersion: '6.x' #Specifies the .NET SDK version to use.

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    packageType: sdk
    version: '$(dotnetSdkVersion)'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- powershell: |
    $ErrorActionPreference = 'Stop'
    Remove-TypeData -TypeName System.Security.AccessControl.ObjectSecurity
    Import-Module Microsoft.PowerShell.Security
    Write-Output "Microsoft.PowerShell.Security module imported successfully."
  displayName: 'Check and Import PowerShell Security Module'

- script: 'npx node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: gulp@1
  displayName: 'Run gulp tasks'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()
